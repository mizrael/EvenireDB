@page "/streams/{Id:guid}"
@inject EvenireDB.Client.IStreamsClient streamsClient

<PageTitle>Stream Details</PageTitle>

<h1>Stream Details</h1>

@if (_stream is null)
{
    <Loading></Loading>
}
else
{
    <form>
        <div class="form-group row">
            <label for="streamId" class="col-sm-2 col-form-label">Id</label>
            <div class="col-sm-10">
                <input type="text" readonly class="form-control-plaintext" id="streamId" value="@_stream.StreamId">
                @if (_stream.IsCached)
                {
                    <span class="badge badge-info">cached</span>
                }
                else
                {
                    <span class="badge badge-secondary">not cached</span>
                }
            </div>
        </div>
        <div class="form-group row">
            <label for="eventsCount" class="col-sm-2 col-form-label">Events #</label>
            <div class="col-sm-10">
                <input type="text" class="form-control" id="eventsCount" placeholder="@_stream.EventsCount">
            </div>
        </div>
        <div class="form-group row">
            <label for="createdAt" class="col-sm-2 col-form-label">Created at</label>
            <div class="col-sm-4">
                <input type="text" class="form-control" id="createdAt" placeholder="@_stream.CreatedAt">
            </div>

            <label for="lastAccessedAt" class="col-sm-2 col-form-label">Last accessed at</label>
            <div class="col-sm-4">
                <input type="text" class="form-control" id="lastAccessedAt" placeholder="@_stream.LastAccessedAt">
            </div>
        </div>
    </form>
}

<a href="/streams">Back to archive</a> 

@if (_isFailed)
{
    <ErrorAlert></ErrorAlert>
}

@code {
    private StreamInfo? _stream;
    private bool _isFailed = false;

    [Parameter]
    public Guid Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await RefreshData();
    }

    private async Task RefreshData()
    {
        _isFailed = false;
        try
        {
            _stream = await streamsClient.GetStreamInfoAsync(this.Id);
        }
        catch
        {
            _isFailed = true;
        }
    }
}