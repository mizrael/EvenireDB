@page "/streams"
@inject EvenireDB.Client.IStreamsClient streamsClient

<PageTitle>Streams</PageTitle>

<h1>Streams</h1>

@if (_status == OperationStatus.Processing)
{
    <Loading></Loading>
}
else if (_status == OperationStatus.Failure)
{
    <CloseableAlert Message="An error has occurred while fetching data." Type="CloseableAlert.AlertTypes.Danger"></CloseableAlert>
}
else if (_streams != null)
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th scope="col">Id</th>
                <th scope="col">Events #</th>
                <th scope="col">Is Cached</th>
                <th scope="col">Created on</th>
                <th scope="col">Last updated on</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var stream in _streams)
            {
                <tr>
                    <th scope="row">@stream.StreamId</th>
                    <td>@stream.EventsCount</td>
                    <td>@stream.IsCached</td>
                    <td>@stream.CreatedAt</td>
                    <td>@stream.LastAccessedAt</td>
                    <td>
                        <a href='/streams/@stream.StreamId' title='view details' class="mr-2">
                            <span class="oi oi-bolt" aria-hidden="true"></span>
                        </a>
                        <a title="delete" href="#" @onclick="() => OpenDeleteStream(stream)"
                           @onclick:preventDefault="true" @onclick:stopPropagation="true">
                            <span class="oi oi-trash" aria-hidden="true"></span>
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <Modal @ref='_deleteStreamModal'>
        Are you sure you want to delete the stream?
    </Modal>
}

@code {
    private IEnumerable<StreamInfo>? _streams;
    private OperationStatus _status = OperationStatus.None;
    private Modal _deleteStreamModal;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private async Task RefreshData()
    {
        _streams = null;
        _status = OperationStatus.Processing;

        try
        {
            _streams = await streamsClient.GetStreamInfosAsync();
            _status = OperationStatus.Success;
        }
        catch
        {
            _status = OperationStatus.Failure;
        }
    }

    private void OpenDeleteStream(StreamInfo stream)
    {
        if (_deleteStreamModal is null || stream is null)
            return;

        _deleteStreamModal.Options = new Modal.ModalOptions(
            $"Delete Stream '{stream.StreamId}'?",
            null,
            new Modal.ModalButton[] {
                Modal.ModalButton.Danger("Proceed", async () =>
                {
                    bool deleted = false;
                    _status = OperationStatus.Processing;
                    try
                    {
                        await streamsClient.DeleteStreamAsync(stream.StreamId);
                        deleted = true;
                    }
                    catch (Exception)
                    {

                        _status = OperationStatus.None;
                    }

                    if(deleted){
                        await RefreshData();
                        StateHasChanged();
                    }
                })
                },
            ShowClose: true,
            ShowOpen: false
        );

        _deleteStreamModal.Open();
    }
}