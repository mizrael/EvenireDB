@using System.ComponentModel.DataAnnotations
@inject IEventsClient eventsClient

<div class="stream-events">
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th scope="col">Id</th>
                <th scope="col">Type</th>
                <th scope="col">Created on</th>
                <th scope="col">Payload size</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var evt in _events)
            {
                <tr>
                    <th scope="row">
                        @(evt.Id.Timestamp)-@evt.Id.Sequence
                    </th>
                    <td>@evt.Type</td>
                    <td>@evt.Id.CreatedAt</td>
                    <td>@evt.Data.Length bytes</td>
                    <td><button type='button' @onclick='() => OpenPayloadModal(evt)'>view payload</button></td>
                </tr>
            }
        </tbody>
    </table>

    <button @onclick="FetchEventsAsync" class="btn btn-primary" disabled="@(!_hasNextPage)">Load more</button>

    @if (_status == OperationStatus.Processing)
    {
        <Loading></Loading>
    }
    else if (_status == OperationStatus.Failure)
    {
        <CloseableAlert Message="an error has occurred while pulling events." Type="CloseableAlert.AlertTypes.Danger">
        </CloseableAlert>
    }

    <Modal Options="@_showPayloadOptions" @ref='_payloadModal'>
        <div>@DecodePayload(_selectedEvent)</div>
    </Modal>
</div>

@code {
    private Modal _payloadModal;
    private List<Event> _events = new();
    private List<Event> _nextEvents = new();
    private uint _position = 0;

    private bool _hasNextPage => _nextEvents.Any();

    private OperationStatus _status = OperationStatus.None;

    private Event? _selectedEvent;

    [Parameter]
    public Guid? StreamId { get; set; } = null;

    protected override async Task OnParametersSetAsync()
    {
        await FetchEventsAsync();
    }

    public async Task FetchEventsAsync()
    {
        _events.Clear();
        if (StreamId is null)
            return;

        if (_position == 0)
        {
            await foreach (var item in eventsClient.ReadAsync(StreamId.Value, position: _position, direction:
            EvenireDB.Common.Direction.Forward))
                _events.Add(item);

            _position += (uint)_events.Count;
        }
        else
        {
            _events.AddRange(_nextEvents);

            _position += (uint)_nextEvents.Count;
        }

        _nextEvents.Clear();
        await foreach (var item in eventsClient.ReadAsync(StreamId.Value, position: _position, direction:
        EvenireDB.Common.Direction.Forward))
            _nextEvents.Add(item);
    }

    public void Reset()
    {
        _events.Clear();
        _nextEvents.Clear();
        _position = 0;
    }

    private void OpenPayloadModal(Event evt)
    {
        _selectedEvent = evt;
        _payloadModal?.Open();
    }

    private string DecodePayload(Event evt)
    {
        if (evt?.Data is null)
            return "";
        return System.Text.Encoding.UTF8.GetString(evt.Data.Span);
    }

    private Modal.ModalOptions _showPayloadOptions = new Modal.ModalOptions(
    "Show Event payload",
    "Show payload",
    new Modal.ModalButton[] {
Modal.ModalButton.Primary("Ok")
    },
    ShowClose: true,
    ShowOpen: false
    );

}